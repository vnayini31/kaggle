"75 to under $100,000" = "$75-100k",
"100 to under $150,000" = "$100-150k",
"$150,000 or more" = ">150k",
"Don't know/Refused (VOL)" = "Don't know/refused")[religion$income]
religion$income <- factor(religion$income, levels = c("<$10k", "$10-20k", "$20-30k", "$30-40k", "$40-50k", "$50-75k",
"$75-100k", "$100-150k", ">150k", "Don't know/refused"))
counts <- count(religion, c("reltrad", "income"))
names(counts)[1] <- "religion"
# Change defaults for xtable to be more attractive
# Inspired by: http://cameron.bracken.bz/sweave-xtable-booktabs
library(xtable)
xtable <- function(x, file = "", ..., rownames = FALSE){
table <- xtable::xtable(x, ...)
print(table, floating = F, hline.after = NULL,
add.to.row = list(pos = list(-1,0, nrow(x)),
command = c('\\toprule\n ','\\midrule\n  ','\\bottomrule\n')),
include.rownames = rownames, NA.string = "---",
file = file,
comment = FALSE, timestamp = FALSE
)
}
install.packages("xtable"
install.packages("xtable")
install.packages("xtable")
library(foreign)
library(stringr)
library(plyr)
library(reshape2)
source("xtable.r")
install.packages("xtable")
# Data from http://pewforum.org/Datasets/Dataset-Download.aspx
# Load data -----------------------------------------------------------------
pew <- read.spss("pew.sav")
pew <- as.data.frame(pew)
religion <- pew[c("q16", "reltrad", "income")]
religion$reltrad <- as.character(religion$reltrad)
religion$reltrad <- str_replace(religion$reltrad, " Churches", "")
religion$reltrad <- str_replace(religion$reltrad, " Protestant", " Prot")
religion$reltrad[religion$q16 == " Atheist (do not believe in God) "] <- "Atheist"
religion$reltrad[religion$q16 == " Agnostic (not sure if there is a God) "] <- "Agnostic"
religion$reltrad <- str_trim(religion$reltrad)
religion$reltrad <- str_replace_all(religion$reltrad, " \\(.*?\\)", "")
religion$income <- c("Less than $10,000" = "<$10k",
"10 to under $20,000" = "$10-20k",
"20 to under $30,000" = "$20-30k",
"30 to under $40,000" = "$30-40k",
"40 to under $50,000" = "$40-50k",
"50 to under $75,000" = "$50-75k",
"75 to under $100,000" = "$75-100k",
"100 to under $150,000" = "$100-150k",
"$150,000 or more" = ">150k",
"Don't know/Refused (VOL)" = "Don't know/refused")[religion$income]
religion$income <- factor(religion$income, levels = c("<$10k", "$10-20k", "$20-30k", "$30-40k", "$40-50k", "$50-75k",
"$75-100k", "$100-150k", ">150k", "Don't know/refused"))
counts <- count(religion, c("reltrad", "income"))
names(counts)[1] <- "religion"
install.packages("xtable")
library(foreign)
library(stringr)
library(plyr)
library(reshape2)
source("xtable.r")
# Data from http://pewforum.org/Datasets/Dataset-Download.aspx
# Load data -----------------------------------------------------------------
pew <- read.spss("pew.sav")
pew <- as.data.frame(pew)
religion <- pew[c("q16", "reltrad", "income")]
religion$reltrad <- as.character(religion$reltrad)
religion$reltrad <- str_replace(religion$reltrad, " Churches", "")
religion$reltrad <- str_replace(religion$reltrad, " Protestant", " Prot")
religion$reltrad[religion$q16 == " Atheist (do not believe in God) "] <- "Atheist"
religion$reltrad[religion$q16 == " Agnostic (not sure if there is a God) "] <- "Agnostic"
religion$reltrad <- str_trim(religion$reltrad)
religion$reltrad <- str_replace_all(religion$reltrad, " \\(.*?\\)", "")
religion$income <- c("Less than $10,000" = "<$10k",
"10 to under $20,000" = "$10-20k",
"20 to under $30,000" = "$20-30k",
"30 to under $40,000" = "$30-40k",
"40 to under $50,000" = "$40-50k",
"50 to under $75,000" = "$50-75k",
"75 to under $100,000" = "$75-100k",
"100 to under $150,000" = "$100-150k",
"$150,000 or more" = ">150k",
"Don't know/Refused (VOL)" = "Don't know/refused")[religion$income]
religion$income <- factor(religion$income, levels = c("<$10k", "$10-20k", "$20-30k", "$30-40k", "$40-50k", "$50-75k",
"$75-100k", "$100-150k", ">150k", "Don't know/refused"))
counts <- count(religion, c("reltrad", "income"))
names(counts)[1] <- "religion"
xtable(counts[1:10, ], file = "pew-clean.tex")
raw <- dcast(counts, religion ~ income)
xtable(raw[1:10, 1:7], file = "pew-raw.tex")
raw
?molten
library(reshape2)
?melt
?reshape2
?reshape
test <- melt(raw)
head(test)
options(stringsAsFactors = FALSE)
library(lubridate)
library(reshape2)
library(stringr)
library(plyr)
source("xtable.r")
raw <- read.csv("billboard.csv")
head(raw)
melt(raw)
test <- melt(raw)
head(test)
options(stringsAsFactors = FALSE)
library(lubridate)
library(reshape2)
library(stringr)
library(plyr)
source("xtable.r")
raw <- read.csv("billboard.csv")
raw <- raw[, c("year", "artist.inverted", "track", "time", "date.entered", "x1st.week", "x2nd.week", "x3rd.week", "x4th.week", "x5th.week", "x6th.week", "x7th.week", "x8th.week", "x9th.week", "x10th.week", "x11th.week", "x12th.week", "x13th.week", "x14th.week", "x15th.week", "x16th.week", "x17th.week", "x18th.week", "x19th.week", "x20th.week", "x21st.week", "x22nd.week", "x23rd.week", "x24th.week", "x25th.week", "x26th.week", "x27th.week", "x28th.week", "x29th.week", "x30th.week", "x31st.week", "x32nd.week", "x33rd.week", "x34th.week", "x35th.week", "x36th.week", "x37th.week", "x38th.week", "x39th.week", "x40th.week", "x41st.week", "x42nd.week", "x43rd.week", "x44th.week", "x45th.week", "x46th.week", "x47th.week", "x48th.week", "x49th.week", "x50th.week", "x51st.week", "x52nd.week", "x53rd.week", "x54th.week", "x55th.week", "x56th.week", "x57th.week", "x58th.week", "x59th.week", "x60th.week", "x61st.week", "x62nd.week", "x63rd.week", "x64th.week", "x65th.week", "x66th.week", "x67th.week", "x68th.week", "x69th.week", "x70th.week", "x71st.week", "x72nd.week", "x73rd.week", "x74th.week", "x75th.week", "x76th.week")]
names(raw)[2] <- "artist"
raw$artist <- iconv(raw$artist, "MAC", "ASCII//translit")
raw$track <- str_replace(raw$track, " \\(.*?\\)", "")
names(raw)[-(1:5)] <- str_c("wk", 1:76)
raw <- arrange(raw, year, artist, track)
head(raw)
test <- melt(raw)
head(test)
options(stringsAsFactors = FALSE)
library(lubridate)
library(reshape2)
library(stringr)
library(plyr)
source("xtable.r")
raw <- read.csv("billboard.csv")
raw <- raw[, c("year", "artist.inverted", "track", "time", "date.entered", "x1st.week", "x2nd.week", "x3rd.week", "x4th.week", "x5th.week", "x6th.week", "x7th.week", "x8th.week", "x9th.week", "x10th.week", "x11th.week", "x12th.week", "x13th.week", "x14th.week", "x15th.week", "x16th.week", "x17th.week", "x18th.week", "x19th.week", "x20th.week", "x21st.week", "x22nd.week", "x23rd.week", "x24th.week", "x25th.week", "x26th.week", "x27th.week", "x28th.week", "x29th.week", "x30th.week", "x31st.week", "x32nd.week", "x33rd.week", "x34th.week", "x35th.week", "x36th.week", "x37th.week", "x38th.week", "x39th.week", "x40th.week", "x41st.week", "x42nd.week", "x43rd.week", "x44th.week", "x45th.week", "x46th.week", "x47th.week", "x48th.week", "x49th.week", "x50th.week", "x51st.week", "x52nd.week", "x53rd.week", "x54th.week", "x55th.week", "x56th.week", "x57th.week", "x58th.week", "x59th.week", "x60th.week", "x61st.week", "x62nd.week", "x63rd.week", "x64th.week", "x65th.week", "x66th.week", "x67th.week", "x68th.week", "x69th.week", "x70th.week", "x71st.week", "x72nd.week", "x73rd.week", "x74th.week", "x75th.week", "x76th.week")]
names(raw)[2] <- "artist"
raw$artist <- iconv(raw$artist, "MAC", "ASCII//translit")
raw$track <- str_replace(raw$track, " \\(.*?\\)", "")
names(raw)[-(1:5)] <- str_c("wk", 1:76)
raw <- arrange(raw, year, artist, track)
long_name <- nchar(raw$track) > 20
raw$track[long_name] <- paste0(substr(raw$track[long_name], 0, 20), "...")
xtable(raw[c(1:3, 6:10), 1:8], "billboard-raw.tex")
clean <- melt(raw, id = 1:5, na.rm = T)
clean$week <- as.integer(str_replace_all(clean$variable, "[^0-9]+", ""))
clean$variable <- NULL
clean$date.entered <- ymd(clean$date.entered)
clean$date <- clean$date.entered + weeks(clean$week - 1)
clean$date.entered <- NULL
clean <- rename(clean, c("value" = "rank"))
clean <- arrange(clean, year, artist, track, time, week)
clean <- clean[c("year", "artist", "time", "track", "date", "week", "rank")]
clean_out <- mutate(clean,
date = as.character(date))
xtable(clean_out[1:15, ], "billboard-clean.tex")
clean_out <- mutate(clean,
date = as.character(date))
head(clean)
getwd()
setwd("C:\Users\vnayini\Documents\GitHub\bootcamp\Datasets")
setwd("C:\\Users\\vnayini\\Documents\\GitHub\\bootcamp\\Datasets")
getwd()
input_titanic_data <- read.csv("Titanic_train.csv")
names(input_titanic_data)
head(input_titanic_data)
str(input_titanic_data)
plot(Survived,Sex)
plot(input_titanic_data$Survived,input_titanic_data$Sex)
head(input_titanic_data)
?hist
hist(input_titanic_data$Age)
hist(input_titanic_data$Fare)
library(sqldf)
unique_labels_survive <- sqldf("select distinct Survived from input_titantic_data")
unique_labels_survive <- sqldf("select distinct Survived from input_titanic_data")
unique_labels_survive
unique_labels_embark <- sqldf("select distinct Embarked from inptut_titanic_data")
unique_labels_embark <- sqldf("select distinct Embarked from input_titanic_data")
unique_labels_embark
summary(input_titanic_data)
str(input_titanic_data)
summary(input_titanic_data$Survived)
input_titanic_data$Survived <- as.factor(input_titanic_data$Survived)
str(input_titanic_data)
install.packages("input_titanic_data")
attach(input_titanic_data)
sapply(class)
sapply(input_titanic_data,class)
input_titanic_data$Survived <- factor(input_titanic_data$Survived,labelx = c("died","survived"))
input_titanic_data$Survived <- factor(input_titanic_data$Survived,labels = c("died","survived"))
head(input_titanic_data)
summary(Pclass)
class(Pclass)
class(Survived)
str(Survived)
str(input_titanic_data$Survived)
survivedTable <- table(input_titatnic_data$Survived)
survivedTable <- table(input_titatnic_data$Survived)
survivedTable <- table(input_titanic_data$Survived)
survivedTable
detach(input_titanic_data)
attach(input_titanic_data
)
attach(input_titanic_data)
detach(input_titanic_data)
?table
pie(survivedTable, labels = c("Died","Survived"))
titanic <- input_titanic_data
names(titanic)
male <- titanic[titanic$Sex == "male",]
male
head(male)
Age_less_than_30 <- titanic[titanic$Age < 30,]
head(Age_less_than_30)
female <- titanic[titanic$Sex == "female",]
par(mfrow = c(1,2), mar = c(0,0,2,0),oma = c(0,1,0,1))
pie(table(male$Survived),labels - c("Dead","Survived"),main = "Survival Portion Among Men")
pie(table(male$Survived),labels = c("Dead","Survived"),main = "Survival Portion Among Men")
pie(table(female$Survived),labels = c("Dead","Survived"),main = "Survival Portion Among Women")
boxplot(titanic$Age~titanic$Sex, main = "Age Distrbution by Gender, col = c("red","green")")
boxplot(titanic$Age~titanic$Sex, main = "Age Distrbution by Gender, col = c("red","green"))
boxplot(titanic$Age~titanic$Sex, main = "Age Distrbution by Gender", col = c("red","green"))
boxplot(titanic$Age~titanic$Survived, main = "Age Distrbution by Survival", col = c("red","green"))
d = density(na.omit(Titanic$Age))
d = density(na.omit(Titanic$Age))
d = density(na.omit(Age))
plot(d,main = "kernal desnsity of Ages of Titanic Passengers")
?density
install.packages(sm)
install.packages("sm")
Child <- titanic$Age
Child[Child<13] <- 1
Child[Child>=13] <- 2
str(Child)
library(datasets)
plot(x=airquality$Temp, y = airquality$Ozone)
names(airquality)
names(iris)
plot(x=airquality$Temp, y = airquality$Ozone)
?par
plot(x=airquality$Temp, y = airquality$Ozone)
?par
par(mfrow = c(1,2), mar = c(5, 4, 4, 2) + 0.1,oma = c(0,1,0,1))
plot(x=airquality$Temp, y = airquality$Ozone)
str(plot)
png("silicon_valley_plot_demo.png")
hist(airquality$OZone)
hist(airquality$Ozone)
dev.off()
getwd()
head(iris)
library(lattice)
set.seed(10
)
x <- rnorm(100)
f <- rep(1:4, each =25)
y <- x + f - f*x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2", "Group 3", "Group 4"))
xplot(y ~ x|f)
?xplot
?xyplot
xyplot(y ~ x|f)
?ggvis
install.packages("ggvis")
pairs(iris)
splom(iris)
splom(iris[1:4] | Species)
library(ggplot)
library(ggplot2)
qplot(displ, hwy, data=mpg, facets = .~drv)
xyplot(hwy ~ displ|drv)
xyplot(hwy ~ displ)
xyplot(mpg$hwy ~ mpg$displ|mpg$drv)
g<- ggplot(iris, aes(Sepal.Length, Sepal.Width))
g+ geom_point()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "lm") + facet_grid(,~Species)
g + geom_point() + geom_smooth(method = "lm") + facet_grid(.~Species)
names(titanic)
head(titanic)
titanic_plot <- ggplot(titanic,aes(titanic$Survived,titanic$Sex))
titanic_plot + geom_point()
titanic_plot <- ggplot(titanic,aes(titanic$Age,titanic$Fare))
titanic_plot + geom_point()
titanic_plot + geom_point() + geom_smooth(method = "lm")
titanic_plot + geom_point() + geom_smooth(method = "lm") + facet
titanic_plot + geom_point() + geom_smooth(method = "lm") + facet_grid(.~titanic$Sex)
titanic_plot + geom_point() + geom_smooth(method = "lm")
titanic_plot + geom_point() + geom_smooth(method = "lm") + facet_grid(.~titanic$Sex)
titanic_plot + geom_point() + geom_smooth(method = "lm") + facet_grid(.~titanic$Embarked)
titanic_plot + geom_point() + geom_smooth(method = "lm")
titanic_plot <- ggplot(titanic,aes(titanic$Age,titanic$Fare))
titanic_plot + geom_point()
summary(titanic$Age)
titanic_plot + geom_point() + geom_smooth(method = "lm")
titanic_plot + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ Embarked)
titanic_plot + geom_point() + geom_smooth(method = "lm") + facet_grid(.~titanic$Embarked)
titanic_plot + geom_point() + geom_smooth(method = "lm") + facet_grid(. ~ Embarked)
library(markdown)
install.packages("markdown")
titanic_plot <- ggplot(titanic,aes(Age,Fare))
head(titanic_plot)
install.packages("RPart")
install.packages("rpart")
head(titanic)
titanic_plot <- ggplot(data = titanic,aes=(Fare,Age))
titanic_plot <- ggplot(titanic,aes=(Fare,Age))
titanic_plot <- ggplot(titanic,aes(Fare,Age))
titanic_plot + geom_point()
titanic_plot <- ggplot(titanic,aes(Age,Fare))
titanic_plot <- ggplot(titanic,aes(Age,Fare))
titanic_plot + geom_point()
levels(titanic$SibSp)
hist(titanic$SibSp)
titanic$Child <- titanic$Age
titanic$Child[titanic$Child>13,] <- 1
titanic$Child[titanic$Child<13] <- 1
titanic$Child[titanic$Child>=13] <- 2
head(titanic)
titanic_plot <- ggplot(titanic,aes(fare))
titanic_plot + geom_point()
titanic_plot <- ggplot(titanic,aes(Fare))
titanic_plot + geom_point()
titanic_plot <- ggplot(titanic,aes(Fare,Survived))
titanic_plot + geom_point()
titanic_plot <- ggplot(titanic,aes(Survived,Fare))
titanic_plot + geom_point()
titanic_plot + geom_point() + facet_grid(Child)
titanic_plot + geom_point() + facet_grid(~ .Child)
titanic_plot + geom_point() + facet_grid(. ~ Child)
titanic_plot + geom_point() + facet_grid(. ~ Child) + facet_grid(.~ Sex)
titanic_plot + geom_point() + facet_grid(. ~ Child)
titanic_plot + geom_point() + facet_grid(. ~ Child) + facet_grid(.~ Sex)
install.packages("rpart")
library(rpart)
?kyphosis
str(kyphosis)
n.points <- nrow(kyphosis)
n.points
sampling.rate <- 0.8
random.training <- sample(1:n.points,sampling.rate*n.points,replace = F)
head(random.training)
ky.training <- subset(kyphosis[random.training,])
?subset
ky.training <- kyphosis[random.training,]
head(ky.training)
dim(ky.training)
nrow(ky.training)
?set.seed
ky.test <- kyphosis[-random.training,]
?setdiff
ky.fit <- rpart(kyphosis ~ Age + Number + Start, data = ky.training)
ky.fit <- rpart(Kyphosis ~ Age + Number + Start, data = ky.training)
?rpart
ky.fit
12/64
1 - (42/64)^2 - (12/64)^2
1 - (49/53)^2 - (4/53)^2
1 - (8/11)^2 - (3/11)^2
print ky.fit
print ky.fit
print(ky.fit)
ky.fit <- rpart(Kyphosis ~ ., data = ky.training)
print(ky.fit)
ky_fit <- rpart(Kyphosis ~. , data = ky.training)
print(ky_fit)
ky.pred <- predict(ky.fit, newdata = ky.test)
ky.pred <- predict(ky.fit, newdata = ky.test, type = "class")
head(ky.pred)
ky.pred <- predict(ky_fit, newdata = ky.test)
ky.pred
ky.pred <- predict(ky.fit, newdata = ky.test, type = "class")
ky.true <- ky.test[,1]
pred_table <- table(ky.pred,ky.true)
pred_table
data(iris)
head(iris)
?sample
nrow(iris)
library(rpart)
library(datasets)
sampling_rate = 0.7
data(iris)
iris_train_rows <- sample(1:nrow(iris), sampling_rate * nrow(iris), replace = FALSE)
iris_train <- iris[iris_train_rows,]
iris_fit <- rpart(Species ~. data = iris_train)
iris_test <- iris[-iris_train_rows,]
iris_pred <- predict(iris_fit, newdata = iris_test, type = "class")
library(rpart)
library(datasets)
sampling_rate = 0.7
data(iris)
iris_train_rows <- sample(1:nrow(iris), sampling_rate * nrow(iris), replace = FALSE)
iris_train <- iris[iris_train_rows,]
iris_fit <- rpart(Species ~ ., data = iris_train)
pecies ~ ., data = iris_train)
iris_test <- iris[-iris_train_rows,]
iris_pred <- predict(iris_fit, newdata = iris_test, type = "class")
pred_table <- table(iris_pred, iris_test[,4])
data(iris)
iris_train_rows <- sample(1:nrow(iris), sampling_rate * nrow(iris), replace = FALSE)
iris_train <- iris[iris_train_rows,]
iris_fit <- rpart(Species ~ ., data = iris_train)
iris_test <- iris[-iris_train_rows,]
iris_pred <- predict(iris_fit, newdata = iris_test, type = "class")
pred_table <- table(iris_pred, iris_test[,4])
pred_table
head(iris_pred)
pred_table <- table(iris_pred,iris_test[4,])
head(iris_test)
pred_table <- table(iris_pred,iris_test[5,])
iris_pred <- predict(iris_fit, newdata = iris_test, type = "class")
head(iris_pred)
pred_table <- table(iris_pred,iris_test[5,])
length(iris_pred)
length(iris_test)
str(iris_pred)
str(iris_test)
iris_true_pred <- iris_test[5,]
pred_table <- table(iris_pred,iris_true_pred)
str(iris_true_pred)
iris_true_pred <- iris_test[,5]
str(iris_true_pred)
pred_table <- table(iris_pred,iris_true_pred)
pred_table
=33/33+2
=43/(43+2)
43/(43+2)
head(iris_pred)
sum(iris_true_pred==pred_table)/length(iris_true_pred)
sum(iris_true_pred==pred_table)
iris_true_pred == iris_pred
length((iris_true_pred == iris_pred) == TRUE)
length((iris_true_pred == iris_pred))
sum((iris_true_pred == iris_pred))
sum((iris_true_pred == iris_pred))/length(iris_true_pred)
print(iris_fit)
-150+4000+60+0
1421/(1421+882)
getwd()
setwd("/Users/vnayini/Documents/R Programming/")
setwd("Titanic_data/")
input_titanic_train <- read.csv("train.csv")
names(input_titanic_train)
str(input_titanic_train)
input_titanic_train$Embarked <- as.factor(input_titanic_train$Embarked)
input_titanic_train$Survived <- as.factor(input_titanic_train$Survived)
input_titanic_train$Pclass <- as.factor(input_titanic_train$Pclass)
input_titanic_train$PassengerId <- as.factor(input_titanic_train$PassengerId)
str(input_titanic_train)
input_titanic_train$PassengerId <- as.character(input_titanic_train$PassengerId)
str(input_titanic_train)
input_titanic_train$Sex <- as.factor(input_titanic_train$Sex)
summary(input_titanic_train)
test_missing <- input_titanic_train[Age==NA,]
test_missing <- input_titanic_train[input_titanic_train$Age==NA,]
head(input_titanic_train)
?dplyr
library(dplyr)
boxplot(input_titanic_train$Age)
install.packages(CART)
install.packages("CART")
??CART
test <- input_titanic_train[input_titanic_train$Age==NA]
test <- input_titanic_train[input_titanic_train$Age==NA,]
test
head(test)
test <- subset(input_titanic_train,Age == NA)
test
?subset
test <- subset(input_titanic_train,Age == 'NA)
test <- subset(input_titanic_train,Age == 'NA')
head(input_titanic_train)
class(input_titanic_train$Age)
test <- subset(input_titanic_train,Age == NA)
test <- subset(input_titanic_train,input_titanic_train$Age == NA)
input_titanic_train[Age==NA,]
input_titanic_train[input_titanic_train$Age==NA,]
head(input_titanic_train)
?mtry
??mtry
install.packages("randomForest")
library(randomForest)
head(iris)
iris.rf <- randomForest(Species ~., data = iris)
iris.rf
iris.rf <- randomForest(Species ~., data = iris, mtry =3)
iris.rf
iris.rf <- randomForest(Species ~., data = iris, mtry =3, maxnodes =4, ntree = 100)
iris.rf
predict(iris.rf,iris[1:5,])
predict(iris.rf,iris[1:5,],type = class)
?predict
?randomForest
?predict
predict(iris.rf,iris[1:5,],type = "prob")
predict(iris.rf,iris,type = "prob")
predict(iris.rf,iris,type = "prob")
predict(iris.rf,iris,type = "prob")
predict(iris.rf,iris,type = "class")
test <- table(iris$Species,predict(iris.rf,iris,type = "class"))
test
head(mtcars)
?mtcars
mrcars.rf <- randomForest(mpg ~., data = mtcars, ntree = 200, keep.forest = FALSE$,importance = keep)
mtcars.rf <- randomForest(mpg ~., data = mtcars, ntree = 200, keep.forest = FALSE,importance = keep)
mtcars.rf <- randomForest(mpg ~., data = mtcars, ntree = 200, keep.forest = FALSE,importance = TRUE)
varImpPlot(mtcars.rf)
ozone.rf <- randomForest(Ozone ~., airquality, na.action = na.omit)
predict(ozone.rf,airquality,type = "class")
head(airquality)
names(titanic)
ncol(titanic)
